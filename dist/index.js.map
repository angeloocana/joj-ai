{"version":3,"sources":["../dist-esnext/index.js"],"names":["J","getClosestMovesToWin","piece","whereCanIGo","reduce","closestPositions","position","move","from","to","y","concat","getClosestMovesToWinForPieces","pieces","accMoves","moves","getComputerMove","game","Game","getTurnPiecesWhereCanIGo"],"mappings":";;;;;;;AAAA;;IAAYA,C;;AACZ;;;;AACA;;;AAGA,SAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AACjC,WAAOA,MAAMC,WAAN,CAAkBC,MAAlB,CAAyB,UAACC,gBAAD,EAAmBC,QAAnB,EAAgC;AAC5D,YAAMC,OAAO,EAAEC,MAAMN,KAAR,EAAeO,IAAIH,QAAnB,EAAb;AACA,YAAI,CAACD,iBAAiB,CAAjB,CAAD,IAAwBA,iBAAiB,CAAjB,EAAoBK,CAApB,GAAwBJ,SAASI,CAA7D,EACI,OAAO,CAACH,IAAD,CAAP;AACJ,YAAIF,iBAAiB,CAAjB,EAAoBK,CAApB,KAA0BJ,SAASI,CAAvC,EACI,OAAOL,iBAAiBM,MAAjB,CAAwBJ,IAAxB,CAAP;AACJ,eAAOF,gBAAP;AACH,KAPM,EAOJ,EAPI,CAAP;AAQH;AACD;;;AAGA,SAASO,6BAAT,CAAuCC,MAAvC,EAA+C;AAC3C,WAAOA,OAAOT,MAAP,CAAc,UAACU,QAAD,EAAWZ,KAAX,EAAqB;AACtC,YAAMa,QAAQd,qBAAqBC,KAArB,CAAd;AACA,YAAI,CAACY,SAAS,CAAT,CAAL,EACI,OAAOC,KAAP;AACJ,YAAI,CAACA,MAAM,CAAN,CAAL,EACI,OAAOD,QAAP;AACJ,YAAIC,MAAM,CAAN,EAASN,EAAT,CAAYC,CAAZ,GAAgBI,SAAS,CAAT,EAAYL,EAAZ,CAAeC,CAAnC,EACI,OAAOK,KAAP;AACJ,YAAIA,MAAM,CAAN,EAASN,EAAT,CAAYC,CAAZ,KAAkBI,SAAS,CAAT,EAAYL,EAAZ,CAAeC,CAArC,EACI,OAAOI,SAASH,MAAT,CAAgBI,KAAhB,CAAP;AACJ,eAAOA,KAAP;AACH,KAXM,EAWJ,EAXI,CAAP;AAYH;AACD;;;AAGA,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAC3B,QAAMJ,SAASb,EAAEkB,IAAF,CAAOC,wBAAP,CAAgCF,IAAhC,CAAf;AACA,QAAMF,QAAQH,8BAA8BC,MAA9B,CAAd;AACA,WAAO,4BAAcE,KAAd,CAAP;AACH;QACQC,e,GAAAA,e;AACT","file":"index.js","sourcesContent":["import * as J from 'joj-core';\nimport { getRandomItem } from 'ptz-math';\n/**\n * Get closest positions to win.\n */\nfunction getClosestMovesToWin(piece) {\n    return piece.whereCanIGo.reduce((closestPositions, position) => {\n        const move = { from: piece, to: position };\n        if (!closestPositions[0] || closestPositions[0].y > position.y)\n            return [move];\n        if (closestPositions[0].y === position.y)\n            return closestPositions.concat(move);\n        return closestPositions;\n    }, []);\n}\n/**\n * Get closest moves to win.\n */\nfunction getClosestMovesToWinForPieces(pieces) {\n    return pieces.reduce((accMoves, piece) => {\n        const moves = getClosestMovesToWin(piece);\n        if (!accMoves[0])\n            return moves;\n        if (!moves[0])\n            return accMoves;\n        if (moves[0].to.y > accMoves[0].to.y)\n            return moves;\n        if (moves[0].to.y === accMoves[0].to.y)\n            return accMoves.concat(moves);\n        return moves;\n    }, []);\n}\n/**\n * Tries to return the best move for a game.\n */\nfunction getComputerMove(game) {\n    const pieces = J.Game.getTurnPiecesWhereCanIGo(game);\n    const moves = getClosestMovesToWinForPieces(pieces);\n    return getRandomItem(moves);\n}\nexport { getComputerMove };\n//# sourceMappingURL=index.js.map"]}